generator client {
  provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Contents {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  published  Boolean  @default(false)
  tag        String?
  content    String?
  publicId   String?  @unique
  format     String?
  version    String?
  VideoId    String?  @unique
  Vformat    String?
  Vversion   String?
  DocID      String?
  DocFormat  String?
  DocVersion String?
  postId     String?  @db.ObjectId
  Post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Post {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String?
  contents  Contents[]
  img       String?
  published Boolean    @default(false)
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?    @db.ObjectId
  hearts    Hearts[]
  archive   Boolean    @default(false)
  comments  Comments[]
}

model Admins {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  name      String?
  img       String?
  published Boolean   @default(false)
  userId    String?   @db.ObjectId
  emails    String?
  user      User?     @relation(fields: [userId], references: [id])
}

model Blocs {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String?
  img       String?
  published Boolean  @default(false)
  userId    String?  @db.ObjectId
  emails    String?
  user      User?    @relation(fields: [userId], references: [id])
}

model Comments {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  userId    String?  @db.ObjectId
  comment   String?
  postId    String?  @db.ObjectId
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model Hearts {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String? @db.ObjectId
  heart  Boolean @default(false)
  postId String? @db.ObjectId
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User?   @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  image            String?
  publicId         String?    @unique
  format           String?
  version          String?
  description      String?
  accounts         Account[]
  Admins           Admins[]
  Blocs            Blocs[]
  comments         Comments[]
  hearts           Hearts[]
  Post             Post[]
  sessions         Session[]
    messagesSent  Message[] 
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  timestamp  DateTime @default(now())
  sender     User     @relation( fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiverId String   
}
